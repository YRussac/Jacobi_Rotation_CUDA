#include "JacobiData.cu"#include "random"#include "iostream"__global__ void compute(JacobiData* jacobi_array){    int block_size = blockDim.x;    jacobi_array[blockIdx.x].jacobi_product_parallel_1(block_size);}int main(){    const int n_problems = 5;    const int n_blocks = n_problems;    const int n_threads = 3;//  Define the array of problems    JacobiData jacobi_array[n_problems];    print_matrix(jacobi_array[0].A, jacobi_array[0].d, "Initial matrix A number 0");//    On GPU    compute<<<n_blocks, n_threads>>>(jacobi_array);    // Wait for GPU to finish before accessing on host    cudaDeviceSynchronize();    print_matrix(jacobi_array[0].A, jacobi_array[0].d, "Output matrix A number 0");    for (int i = 0; i < n_problems; ++i) {        jacobi_array[i].free_memory();    }    return 0;}